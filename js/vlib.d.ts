import libcrypto = require("crypto");
declare class D extends Date {
    constructor(...args: any[]);
    format(format: any): string;
    msec(): number;
    sec(): number;
    minute_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    hour_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    day_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    week_start(sunday_start?: boolean): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    month_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    quarter_year_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    half_year_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    year_start(): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    increment({ seconds, minutes, hours, days, weeks, months, years }: {
        seconds?: number | undefined;
        minutes?: number | undefined;
        hours?: number | undefined;
        days?: number | undefined;
        weeks?: number | undefined;
        months?: number | undefined;
        years?: number | undefined;
    }): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
    decrement({ seconds, minutes, hours, days, weeks, months, years }: {
        seconds?: number | undefined;
        minutes?: number | undefined;
        hours?: number | undefined;
        days?: number | undefined;
        weeks?: number | undefined;
        months?: number | undefined;
        years?: number | undefined;
    }): {
        format(format: any): string;
        msec(): number;
        sec(): number;
        minute_start(): any;
        hour_start(): any;
        day_start(): any;
        week_start(sunday_start?: boolean): any;
        month_start(): any;
        quarter_year_start(): any;
        half_year_start(): any;
        year_start(): any;
        increment({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        decrement({ seconds, minutes, hours, days, weeks, months, years }: {
            seconds?: number | undefined;
            minutes?: number | undefined;
            hours?: number | undefined;
            days?: number | undefined;
            weeks?: number | undefined;
            months?: number | undefined;
            years?: number | undefined;
        }): any;
        toString(): string;
        toDateString(): string;
        toTimeString(): string;
        toLocaleString(): string;
        toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(): string;
        toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(): string;
        toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;
        toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;
        valueOf(): number;
        getTime(): number;
        getFullYear(): number;
        getUTCFullYear(): number;
        getMonth(): number;
        getUTCMonth(): number;
        getDate(): number;
        getUTCDate(): number;
        getDay(): number;
        getUTCDay(): number;
        getHours(): number;
        getUTCHours(): number;
        getMinutes(): number;
        getUTCMinutes(): number;
        getSeconds(): number;
        getUTCSeconds(): number;
        getMilliseconds(): number;
        getUTCMilliseconds(): number;
        getTimezoneOffset(): number;
        setTime(time: number): number;
        setMilliseconds(ms: number): number;
        setUTCMilliseconds(ms: number): number;
        setSeconds(sec: number, ms?: number): number;
        setUTCSeconds(sec: number, ms?: number): number;
        setMinutes(min: number, sec?: number, ms?: number): number;
        setUTCMinutes(min: number, sec?: number, ms?: number): number;
        setHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
        setDate(date: number): number;
        setUTCDate(date: number): number;
        setMonth(month: number, date?: number): number;
        setUTCMonth(month: number, date?: number): number;
        setFullYear(year: number, month?: number, date?: number): number;
        setUTCFullYear(year: number, month?: number, date?: number): number;
        toUTCString(): string;
        toISOString(): string;
        toJSON(key?: any): string;
        [Symbol.toPrimitive](hint: "default"): string;
        [Symbol.toPrimitive](hint: "string"): string;
        [Symbol.toPrimitive](hint: "number"): number;
        [Symbol.toPrimitive](hint: string): string | number;
    };
}
export class Path {
    static home(): {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    };
    constructor(path: any, clean?: boolean);
    _path: any;
    trim(): void;
    toString(): any;
    str(): any;
    get length(): any;
    get len(): any;
    get stat(): {};
    _stat: {} | undefined;
    get dev(): any;
    get ino(): any;
    get mode(): any;
    get nlink(): any;
    get uid(): any;
    get gid(): any;
    get rdev(): any;
    get size(): any;
    get blksize(): any;
    get blocks(): any;
    get atime(): any;
    get mtime(): any;
    get ctime(): any;
    get birthtime(): any;
    disk_usage(): Promise<any>;
    available_space(): Promise<any>;
    reset(): this;
    _name: any;
    _extension: any;
    _base: {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    } | undefined;
    _abs: {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    } | undefined;
    refresh(): this;
    is_dir(): any;
    exists(): boolean;
    name(with_extension?: boolean): any;
    extension(): any;
    base(back?: number): {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    } | null;
    abs(): {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    };
    join(subpath: any, clean?: boolean): {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    };
    cp(destination: any): Promise<any>;
    cp_sync(destination: any): Promise<any>;
    mv(destination: any): Promise<any>;
    del({ recursive }?: {
        recursive?: boolean | undefined;
    }): Promise<any>;
    del_sync({ recursive }?: {
        recursive?: boolean | undefined;
    }): this;
    trash(): Promise<any>;
    mkdir(): Promise<any>;
    mkdir_sync(): this | undefined;
    touch(): Promise<any>;
    load({ type, encoding }?: {
        type?: string | undefined;
        encoding?: null | undefined;
    }): Promise<any>;
    load_sync({ type, encoding }?: {
        type?: string | undefined;
        encoding?: null | undefined;
    }): any;
    save(data: any): Promise<any>;
    save_sync(data: any): this;
    paths({ recursive, absolute, exclude, }?: {
        recursive?: boolean | undefined;
        absolute?: boolean | undefined;
        exclude?: any[] | undefined;
    }, ...args: any[]): Promise<any>;
    paths_sync(recursive?: boolean): any[];
    truncate(offset: any): Promise<any>;
}
export class Cache {
    constructor({ limit, ttl, ttl_interval, }: {
        limit?: null | undefined;
        ttl?: null | undefined;
        ttl_interval?: number | undefined;
    });
    limit: any;
    ttl: any;
    map: Map<any, any>;
    last_access_times: Map<any, any>;
    cleanup_interval_id: NodeJS.Timeout | null;
    _start_cleanup_interval(ttl_interval: any): void;
    _stop_cleanup_interval(): void;
    _check_and_remove_oldest(): void;
    _update_last_access_time(key: any): void;
    has(key: any): boolean;
    set(key: any, value: any): void;
    get(key: any): any;
    delete(key: any): boolean;
    clear(): void;
    stop(): void;
    keys(): MapIterator<any>;
    values(): MapIterator<any>;
}
declare class Colors {
    static black: string;
    static red: string;
    static red_bold: string;
    static green: string;
    static yellow: string;
    static blue: string;
    static magenta: string;
    static cyan: string;
    static gray: string;
    static bold: string;
    static italic: string;
    static end: string;
    static enable(): void;
    static disable(): void;
}
export class Proc {
    constructor({ debug }?: {
        debug?: boolean | undefined;
    });
    debug: boolean;
    proc: null;
    promise: Promise<any> | null;
    err: string | null;
    out: string | null;
    exit_status: any;
    on_output(data: any): void;
    on_error(data: any): null;
    on_exit(code: any): null;
    start({ command, args, working_directory, interactive, detached, env, colors, opts, }: {
        command?: string | undefined;
        args?: any[] | undefined;
        working_directory?: null | undefined;
        interactive?: boolean | undefined;
        detached?: boolean | undefined;
        env?: null | undefined;
        colors?: boolean | undefined;
        opts?: {} | undefined;
    }): Promise<any>;
    write(data: any): this;
    join(): Promise<any>;
    kill(signal?: string): this;
}
export class network {
    static private_ip(family?: string): string;
}
export class TimeLimiter {
    constructor({ duration, limit, }: {
        duration?: number | undefined;
        limit?: number | undefined;
    });
    _duration: number;
    _limit: number;
    _counts: number;
    _expiration: number;
    limit(): boolean;
}
export class Daemon {
    constructor({ name, user, group, command, args, cwd, env, description, auto_restart, auto_restart_limit, auto_restart_delay, logs, errors, }: {
        name?: null | undefined;
        user?: null | undefined;
        group?: null | undefined;
        command?: null | undefined;
        args?: any[] | undefined;
        cwd?: null | undefined;
        env?: {} | undefined;
        description?: null | undefined;
        auto_restart?: boolean | undefined;
        auto_restart_limit?: number | undefined;
        auto_restart_delay?: number | undefined;
        logs?: null | undefined;
        errors?: null | undefined;
    });
    name: any;
    user: any;
    group: any;
    command: any;
    args: any[];
    cwd: any;
    env: {};
    desc: any;
    auto_restart: boolean;
    auto_restart_limit: number;
    auto_restart_delay: number;
    logs: any;
    errors: any;
    path: string;
    proc: {
        debug: boolean;
        proc: null;
        promise: Promise<any> | null;
        err: string | null;
        out: string | null;
        exit_status: any;
        on_output(data: any): void;
        on_error(data: any): null;
        on_exit(code: any): null;
        start({ command, args, working_directory, interactive, detached, env, colors, opts, }: {
            command?: string | undefined;
            args?: any[] | undefined;
            working_directory?: null | undefined;
            interactive?: boolean | undefined;
            detached?: boolean | undefined;
            env?: null | undefined;
            colors?: boolean | undefined;
            opts?: {} | undefined;
        }): Promise<any>;
        write(data: any): any;
        join(): Promise<any>;
        kill(signal?: string): any;
    };
    assign_path_h(): void;
    create_h(): string;
    load_h(): Promise<void>;
    reload_h(): Promise<void>;
    exists(): any;
    create(): Promise<void>;
    update(): Promise<void>;
    remove(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    restart(): Promise<void>;
    is_running(): Promise<boolean>;
    tail(lines?: number): Promise<string | null>;
}
export class Logger {
    constructor({ log_level, log_path, error_path, threading, max_mb, }: {
        log_level?: number | undefined;
        log_path?: null | undefined;
        error_path?: null | undefined;
        threading?: boolean | undefined;
        max_mb?: null | undefined;
    });
    log_level: number;
    log_path: {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    } | null;
    error_path: {
        _path: any;
        trim(): void;
        toString(): any;
        str(): any;
        readonly length: any;
        readonly len: any;
        readonly stat: {};
        _stat: {} | undefined;
        readonly dev: any;
        readonly ino: any;
        readonly mode: any;
        readonly nlink: any;
        readonly uid: any;
        readonly gid: any;
        readonly rdev: any;
        readonly size: any;
        readonly blksize: any;
        readonly blocks: any;
        readonly atime: any;
        readonly mtime: any;
        readonly ctime: any;
        readonly birthtime: any;
        disk_usage(): Promise<any>;
        available_space(): Promise<any>;
        reset(): any;
        _name: any;
        _extension: any;
        _base: any | undefined;
        _abs: any | undefined;
        refresh(): any;
        is_dir(): any;
        exists(): boolean;
        name(with_extension?: boolean): any;
        extension(): any;
        base(back?: number): any | null;
        abs(): any;
        join(subpath: any, clean?: boolean): any;
        cp(destination: any): Promise<any>;
        cp_sync(destination: any): Promise<any>;
        mv(destination: any): Promise<any>;
        del({ recursive }?: {
            recursive?: boolean | undefined;
        }): Promise<any>;
        del_sync({ recursive }?: {
            recursive?: boolean | undefined;
        }): any;
        trash(): Promise<any>;
        mkdir(): Promise<any>;
        mkdir_sync(): any | undefined;
        touch(): Promise<any>;
        load({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): Promise<any>;
        load_sync({ type, encoding }?: {
            type?: string | undefined;
            encoding?: null | undefined;
        }): any;
        save(data: any): Promise<any>;
        save_sync(data: any): any;
        paths({ recursive, absolute, exclude, }?: {
            recursive?: boolean | undefined;
            absolute?: boolean | undefined;
            exclude?: any[] | undefined;
        }, ...args: any[]): Promise<any>;
        paths_sync(recursive?: boolean): any[];
        truncate(offset: any): Promise<any>;
    } | null;
    log_stream: libfs.WriteStream | undefined;
    error_stream: libfs.WriteStream | undefined;
    threading: boolean;
    max_mb: any;
    thread: string;
    assign_paths(log_path: any, error_path: any): void;
    log(level: any, ...args: any[]): void;
    error(prefix: any, err: any): void;
    _truncate(path: any): Promise<any>;
    _random(min?: number, max?: number): number;
}
export class Performance {
    constructor(name?: string);
    name: string;
    times: {};
    now: number;
    start(): number;
    end(id: any, start: any): number;
    dump(): void;
}
export class Mutex {
    locked: boolean;
    queue: any[];
    lock(): Promise<any>;
    unlock(): void;
}
declare class ProgessLoader {
    constructor({ message, steps, step, width }: {
        message?: string | undefined;
        steps?: number | undefined;
        step?: number | undefined;
        width?: number | undefined;
    });
    message: string;
    steps: number;
    step: number;
    width: number;
    progess: number;
    last_progress: any;
    next(increment?: boolean): void;
    progress: number | undefined;
}
export class CLI {
    constructor({ name, description, version, notes, commands, start_index, }?: {
        name?: string | undefined;
        description?: null | undefined;
        version?: null | undefined;
        notes?: null | undefined;
        commands?: any[] | undefined;
        start_index?: number | undefined;
    });
    name: string;
    description: any;
    version: any;
    commands: any[];
    notes: any;
    start_index: number;
    _cast(value: any, type: any): any;
    get({ id, index, type, def, exclude_args }: {
        id: any;
        index?: null | undefined;
        type?: null | undefined;
        def?: null | undefined;
        exclude_args?: boolean | undefined;
    }): {
        found: boolean;
        value: any;
    };
    present(id: any): boolean;
    error(...err: any[]): void;
    throw_error(...err: any[]): void;
    docs(command_or_commands?: null): void;
    start(): Promise<boolean>;
}
declare class Server {
    constructor({ ip, port, https, rate_limit, api_keys, server, }: {
        ip?: null | undefined;
        port?: number | undefined;
        https?: null | undefined;
        rate_limit?: {
            limit: number;
            interval: number;
        } | undefined;
        api_keys?: any[] | undefined;
        server?: null | undefined;
    });
    port: number;
    https_config: any;
    server: libhttps.Server<typeof libhttp.IncomingMessage, typeof libhttp.ServerResponse> | libhttp.Server<typeof libhttp.IncomingMessage, typeof libhttp.ServerResponse> | null;
    api_keys: any[];
    rate_limit: {
        limit: number;
        interval: number;
    };
    streams: Map<any, any>;
    commands: Map<any, any>;
    events: Map<any, any>;
    rate_limit_cache: Map<any, any>;
    start(): void;
    wss: any;
    stop(): Promise<any>;
    on_event(event: any, callback: any): void;
    on(command: any, callback: any): void;
    send({ stream, command, id, data }: {
        stream: any;
        command: any;
        id: any;
        data: any;
    }): Promise<any>;
    await_response({ stream, id, timeout, step }: {
        stream: any;
        id: any;
        timeout?: number | undefined;
        step?: number | undefined;
    }): Promise<any>;
    request({ stream, command, data, timeout }: {
        stream: any;
        command: any;
        data: any;
        timeout?: number | undefined;
    }): Promise<any>;
    _clear_caches(client: any): void;
    _clear_caches_timeout: NodeJS.Timeout | undefined;
}
declare class Client {
    constructor({ url, api_key, reconnect, ping, }: {
        url?: string | undefined;
        api_key?: null | undefined;
        reconnect?: {
            interval: number;
            max_interval: number;
        } | undefined;
        ping?: boolean | undefined;
    });
    url: string;
    api_key: any;
    reconnect: boolean | {
        interval: number;
        max_interval: number;
    };
    auto_ping: number | boolean;
    commands: Map<any, any>;
    events: Map<any, any>;
    messages: Map<any, any>;
    connect(): Promise<any>;
    try_reconnect: boolean | undefined;
    stream: any;
    connected: boolean | undefined;
    auto_ping_timeout: NodeJS.Timeout | undefined;
    disconnect(): void;
    await_till_connected(timeout?: number): Promise<any>;
    on_event(event: any, callback: any): void;
    on(command: any, callback: any): void;
    send_raw(data: any): Promise<void>;
    send({ command, id, data }: {
        command: any;
        id: any;
        data: any;
    }): Promise<any>;
    await_response({ id, timeout, step }: {
        id: any;
        timeout?: number | undefined;
        step?: number | undefined;
    }): Promise<any>;
    request({ command, data, timeout }: {
        command: any;
        data: any;
        timeout?: number | undefined;
    }): Promise<any>;
    _clear_caches(client: any): void;
    _clear_caches_timeout: NodeJS.Timeout | undefined;
}
import libfs = require("fs");
import libhttp = require("http");
import libhttps = require("https");
export declare namespace internal {
    function obj_eq(x: any, y: any, detect_keys?: boolean, detect_keys_nested?: boolean): boolean | any[] | null;
}
export declare namespace object {
    function expand(x: any, y: any): any;
    function eq(x: any, y: any): boolean | any[] | null;
    function detect_changes(x: any, y: any, include_nested?: boolean): boolean | any[] | null;
    function rename_keys(obj?: {}, rename?: string[][], remove?: any[]): {};
    function deep_copy(obj: any): any;
    function delete_recursively(obj: any, remove_keys?: any[]): any;
    function detect_circular(obj: any, attr?: string, seen?: Map<any, any>): void;
    function remove(obj: any, key_or_keys?: string, copy?: boolean): any;
}
export declare namespace utils {
    function sleep(msec: any): Promise<any>;
    function edit_obj_keys(obj?: {}, rename?: string[][], remove?: any[]): {};
    function debounce(delay: any, func: any): (...args: any[]) => void;
    function verify_params({ params, info, check_unknown, parent, error_prefix, throw_err }: {
        params?: {} | undefined;
        info?: {} | undefined;
        check_unknown?: boolean | undefined;
        parent?: string | undefined;
        error_prefix?: string | undefined;
        throw_err?: boolean | undefined;
    }): any;
    function deep_copy(obj: any): any;
    function value_type(value: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "null" | "array";
    function format_bytes(value: any): string;
    function hash(data: any, algo?: string, format?: string): libcrypto.Hash | (Buffer & string);
    function fuzzy_search({ query, targets, limit, case_match, allow_exceeding_chars, get_matches, key, nested_key, }: {
        query: any;
        targets?: any[] | undefined;
        limit?: number | undefined;
        case_match?: boolean | undefined;
        allow_exceeding_chars?: boolean | undefined;
        get_matches?: boolean | undefined;
        key?: null | undefined;
        nested_key?: null | undefined;
    }): any[];
    function fuzzy_match(search: any, target: any, allow_exceeding_chars?: boolean): number | null;
}
export declare function prompt(question: any): Promise<any>;
export declare namespace json {
    function parse(data: any): {};
}
export declare namespace scheme {
    function value_type(value: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "null" | "array";
    function init_scheme_item(scheme_item: any, scheme?: undefined, scheme_key?: undefined): any;
    function type_error_str(scheme_item: any, prefix?: string): string;
    function verify({ object, scheme, value_scheme, check_unknown, parent, error_prefix, err_prefix, throw_err, }: {
        object?: {} | undefined;
        scheme?: {} | undefined;
        value_scheme?: null | undefined;
        check_unknown?: boolean | undefined;
        parent?: string | undefined;
        error_prefix?: string | undefined;
        err_prefix?: null | undefined;
        throw_err?: boolean | undefined;
    }): any;
    function _type_string(type?: any[], prefix?: string): string;
    function throw_undefined(name: any, type: any, throw_err?: boolean): string;
    function throw_invalid_type(name: any, value: any, type?: any[], throw_err?: boolean): string;
}
export declare namespace color {
    function black(data: any): string;
    function red(data: any): string;
    function red_bold(data: any): string;
    function green(data: any): string;
    function yellow(data: any): string;
    function blue(data: any): string;
    function magenta(data: any): string;
    function cyan(data: any): string;
    function gray(data: any): string;
    function bold(data: any): string;
    function italic(data: any): string;
    function end(data: any): string;
}
export declare function print(...args: any[]): void;
export declare function printe(...args: any[]): void;
export declare function print_marker(...args: any[]): void;
export declare function print_warning(...args: any[]): void;
export declare function print_error(...args: any[]): void;
export declare namespace system {
    function format_bytes(bytes: any): string;
    function cpu_usage(): number;
    function memory_usage(format?: boolean): {
        total: string | number;
        used: string | number;
        free: string | number;
        used_percentage: number;
    };
    function network_usage(format?: boolean): Promise<{
        sent: string | number;
        received: string | number;
    }>;
}
export declare namespace unit_tests {
    function _create_unit_test(func: any, id: any, debug?: number): (args: any) => any;
    function perform({ name, unit_tests, target, stop_on_failure, debug_on_failure, args, debug, }: {
        name?: string | undefined;
        unit_tests?: {} | undefined;
        target?: null | undefined;
        stop_on_failure?: boolean | undefined;
        debug_on_failure?: boolean | undefined;
        args?: {} | undefined;
        debug?: number | undefined;
    }): Promise<boolean>;
}
export declare namespace cli {
    function get({ id, index, type, def, exclude_args }: {
        id: any;
        index?: null | undefined;
        type?: null | undefined;
        def?: null | undefined;
        exclude_args?: boolean | undefined;
    }): any;
    function present(id: any): boolean;
}
export declare function request({ host, port, endpoint, method, headers, params, compress, decompress, query, json, reject_unauthorized, delay, http2, }: {
    host: any;
    port?: null | undefined;
    endpoint: any;
    method?: string | undefined;
    headers?: {} | undefined;
    params?: null | undefined;
    compress?: boolean | undefined;
    decompress?: boolean | undefined;
    query?: boolean | undefined;
    json?: boolean | undefined;
    reject_unauthorized?: boolean | undefined;
    delay?: null | undefined;
    http2?: boolean | undefined;
}): Promise<any>;
export declare namespace websocket {
    export { Server };
    export { Client };
}
export declare let version: string;
export { D as Date, Colors as colors, ProgessLoader as ProgressLoader };
